<launch>

    <!-- Posix SITL environment launch script -->
    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0"/>
    <arg name="est" default="lpe"/>
    <arg name="vehicle" default="iris"/>
    <arg name="world" default="$(find architecture)/worlds/3D_puzzle_model.world"/>
    <arg name="sdf" default="$(find mavlink_sitl_gazebo)/models/$(arg vehicle)/$(arg vehicle).sdf"/>
    <arg name="rcS" default="$(find px4)/posix-configs/SITL/init/$(arg est)/$(arg vehicle)"/>

    <arg name="headless" default="true"/>
    <arg name="gui" default="false"/>
    <arg name="ns" default="/"/>

    <arg name="debug" default="false"/>
    <arg name="verbose" default="false"/>
    <arg name="paused" default="false"/>

    <param name="/use_sim_time" value="true" />
    
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find architecture)/rviz_configurations/exploration_ltstarPaths.rviz" />

    <rosparam file="$(find architecture)/cfg/sim_hitl_params.yaml" command="load" />
    <!-- #######################  Rviz    ######################################### -->
   <!--  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find architecture)/rviz_configurations/exploration_ltstarPaths.rviz" /> -->
    <!-- #######################  Gazebo  ######################################### -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="headless" value="$(arg headless)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="world_name" value="$(arg world)" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="verbose" value="$(arg verbose)" />
        <arg name="paused" value="$(arg paused)" />
    </include>
    <param name="robot_description" textfile="/home/mfaria/src/Firmware/Tools/sitl_gazebo/models/rotors_description/urdf/iris_base.urdf" />
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        <param name="publish_frequency" type="double" value="50.0" />
        <param name="tf_prefix" type="string" value=""/>
    </node>
   
    <node name="$(anon vehicle_spawn)" output="screen" pkg="gazebo_ros" type="spawn_model"
        args="-urdf -param /robot_description -model iris -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)"/>s
    <node name="ground_truth_to_tf" pkg="message_to_tf" type="message_to_tf" output="screen">
        <param name="odometry_topic" value="ground_truth_pose"/>
        <param name="frame_id" value="map"/>
        <param name="child_frame_id" type="string" value="base_link"/>
    </node>

    <!-- #######################  Hokuyo  ############################# -->
    <node name="laser_filter" type="scan_to_cloud_filter_chain" pkg="laser_filters">
        <rosparam command="load" file="$(find architecture)/cfg/sim_hitl_params.yaml" />
        <param name="target_frame"   value="base_link" />
        <remap from="cloud_filtered" to="free_cloud" />
        <remap from="scan" to="hokuyo_laser_scan" />
    </node>
    <!-- #######################  Octomap  ######################################## -->
    <node name="octomap_global_planner_server" pkg="octomap_server" type="octomap_server_node" respawn="true" clear_params="true" output="screen" args="$(find lazy_theta_star)/test/data/3dPuzzle_05.bt">    
        <param name="frame_id" type="str" value="/map" />
        <param name="publish_free_space" value="true"/>
    </node>
    <!-- #######################  PX4  ############################################ -->
    <node name="sitl" pkg="px4" type="px4" output="screen"
        args="$(find px4) $(arg rcS)">
    </node>
    <node name="mav_comms"          type="mav_comms_node"       pkg="architecture"  output="screen" />
    <!-- #######################  Architecture nodes  ############################# -->
    <node name="lazy_theta_star"    type="ltStar_async_node"    pkg="lazy_theta_star" output="screen" /> 
    <!-- <node name="state_manager"      type="state_manager_node"   pkg="architecture"  output="screen" /> -->
    <!-- <node name="frontier_cells"     type="frontiers_async_node" pkg="frontiers"     output="screen" /> --> 
    <node name="middle_man_current_position" type="current_position_provider_node" pkg="architecture"  output="screen" />
 
</launch>